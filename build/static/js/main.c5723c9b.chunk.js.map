{"version":3,"sources":["TodoInput.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submit","bind","assertThisInitialized","changeTitle","e","key","onSubmit","onChange","react_default","a","createElement","type","value","content","className","onKeyPress","Component","TodoItem","toggle","delete","onToggle","todo","onDelete","v","checked","status","title","onClick","id","App","state","newTodo","todoList","addTodo","event","push","target","deleted","setState","_this2","todos","filter","item","map","index","src_TodoItem_0","src_TodoInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5723c9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todoinput.css'\r\n\r\nclass TodoInput extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n        this.changeTitle = this.changeTitle.bind(this);\r\n    }\r\n    submit(e){\r\n        if (e.key === 'Enter') {\r\n            this.props.onSubmit(e)\r\n        }\r\n    }\r\n    changeTitle(e){\r\n        this.props.onChange(e)\r\n    }\r\n\r\n    render(){\r\n        return <input type=\"text\" value={this.props.content}\r\n                      className= \"TodoInput\"\r\n                      onChange={this.changeTitle}\r\n                      onKeyPress={this.submit}/>\r\n    }\r\n}\r\n\r\nexport default TodoInput;","import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\n\r\nclass TodoItem extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n\r\n\r\n    toggle(e){\r\n        this.props.onToggle(e, this.props.todo)\r\n    }\r\n    delete(e){\r\n        this.props.onDelete(e, this.props.todo)\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"TodoItem\"v>\r\n                <input type=\"checkbox\" checked={this.props.todo.status==='completed'}\r\n                onChange={this.toggle}/>\r\n                <span className=\"title\">{this.props.todo.title}</span>\r\n                <button onClick={this.delete}>删除</button>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\nimport 'normalize.css';\nimport './reset.css';\nimport './App.css';\nimport TodoInput from './TodoInput';\nimport TodoItem from './TodoItem';\n\nlet id = 0\n\nfunction idMaker(){\n    id += 1\n    return id\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newTodo: '',\n            todoList: [\n            ],\n        };\n        this.addTodo = this.addTodo.bind(this);\n        this.changeTitle = this.changeTitle.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.delete = this.delete.bind(this);\n    }\n\n    addTodo(event){\n        this.state.todoList.push({\n            id: idMaker(),\n            title: event.target.value,\n            status: null,\n            deleted: false\n        })\n        this.setState({\n            newTodo: '',\n            todoList: this.state.todoList\n        })\n    }\n\n    changeTitle(event){\n        this.setState({\n            newTodo: event.target.value,\n            todoList: this.state.todoList\n        })\n    }\n\n    toggle(e, todo){\n        todo.status = todo.status==='completed' ? '' : 'completed'\n        this.setState(this.state)\n    }\n\n    delete(e, todo){\n        todo.deleted = true;\n        this.setState(this.state)\n    }\n\n    render() {\n        let todos = this.state.todoList.filter((item)=> !item.deleted)\n            .map((item,index)=>{\n                return (\n                    <li key={index}>\n                        <TodoItem todo={item} onToggle={this.toggle}\n                        onDelete={this.delete}/>\n                    </li>\n                );\n            })\n        return (\n          <div className=\"App\">\n              <h1>我的待办</h1>\n              <div className=\"inputWrapper\">\n                  <TodoInput content={this.state.newTodo}\n                             onChange={this.changeTitle}\n                             onSubmit={this.addTodo}/>\n              </div>\n              <ol className=\"todoList\">\n                  {todos}\n              </ol>\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}